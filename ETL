from pyspark.sql import SparkSession
from datetime import datetime
import requests

# 📌 Inicia a SparkSession
jdbc_driver_path = "lib/postgresql-42.7.4.jar"

spark = SparkSession.builder \
    .appName("ConexaoPostgres") \
    .config("spark.jars", jdbc_driver_path) \
    .getOrCreate()

if not spark:
    raise Exception("❌ SparkSession não foi iniciada. Verifique a conexão.")

# 📌 Configurações da conexão com PostgreSQL
url_oltp = "jdbc:postgresql://localhost:5432/empresa_exterior"
url_dm = "jdbc:postgresql://localhost:5432/empresa_exteriorOLAP"  # ✅ Novo nome de banco

tabela_oltp = "transacoes"
tabela_dm = "Transacoes_desnormalizada"  # ✅ Novo nome de tabela

properties = {
    "user": "postgres",
    "password": "12345",
    "driver": "org.postgresql.Driver"
}

# 📌 Lê dados da tabela OLTP
df_oltp = spark.read.jdbc(url=url_oltp, table=tabela_oltp, properties=properties)
print("✅ Dados extraídos do sistema OLTP")

# 📌 Converte valores de câmbio com base na data da transação
def buscar_taxa_cambio(data, moeda_origem, moeda_destino):
    try:
        data_formatada = datetime.strptime(data, "%Y-%m-%d").strftime("%Y-%m-%d")
        url = f"https://api.frankfurter.app/{data_formatada}?from={moeda_origem}&to={moeda_destino}"
        response = requests.get(url)
        response.raise_for_status()
        taxa = response.json()["rates"][moeda_destino]
        return float(taxa)
    except Exception as e:
        print(f"❌ Erro na API de câmbio ({moeda_origem} -> {moeda_destino}): {e}")
        return None

# 📌 UDF para aplicar a conversão
from pyspark.sql.functions import udf, upper
from pyspark.sql.types import DoubleType

@udf(DoubleType())
def converter_valor(valor, data, moeda_origem, moeda_destino):
    taxa = buscar_taxa_cambio(data, moeda_origem, moeda_destino)
    if taxa:
        return float(valor) * taxa
    return None

# 📌 Aplica transformação
df_oltp.printSchema()

from pyspark.sql.functions import col

# Ajusta para a estrutura da tabela transacoes_denormalizada
# df_tratado = df_oltp \
#     .withColumnRenamed("valor_monetario", "valor_monetario") \
#     .withColumnRenamed("meio_transporte", "descricao_transporte") \
#     .withColumnRenamed("categoria_produto", "desc_cat_produto") \
#     .withColumnRenamed("produto", "desc_produto") \
#     .withColumnRenamed("codigo_ncm", "codigo_ncm") \
#     .withColumnRenamed("nome_pais", "nome_pais") \
#     .withColumnRenamed("codigo_iso", "cod_iso") \
#     .withColumnRenamed("bloco_economico", "nome_bloco") \
#     .withColumnRenamed("data_cambio", "data_cambio") \
#     .withColumnRenamed("moeda_origem", "moeda_origem") \
#     .withColumnRenamed("moeda_destino", "moeda_destino") \
#     .withColumnRenamed("descricao_moeda", "descricao_moeda") \
#     .withColumn("quantidade", converter_valor(
#         col("valor_monetario"),
#         col("data_cambio"),
#         col("moeda_origem"),
#         col("moeda_destino")
#     )) \
#     .withColumn("pais_origem", upper(col("pais_origem"))) \
#     .withColumn("pais_destino", upper(col("pais_destino"))) \
#     .withColumn("desc_cat_produto", upper(col("desc_cat_produto"))) \
#     .withColumn("desc_produto", upper(col("desc_produto"))) \
#     .withColumn("descricao_transporte", upper(col("descricao_transporte"))) \
#     .withColumn("nome_pais", upper(col("nome_pais"))) \
#     .withColumn("nome_bloco", upper(col("nome_bloco"))) \
#     .withColumn("descricao_moeda", upper(col("descricao_moeda"))) \
#     .withColumn("taxa_cambio_att", upper(col("taxa_cambio_att")))

# 📌 Salva no Data Mart
# df_tratado.write.jdbc(
#     url=url_dm,
#     table=tabela_dm,
#     mode="overwrite",
#     properties=properties
# )

print("✅ Dados carregados no Data Mart com sucesso!")
